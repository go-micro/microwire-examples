// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-micro/microwire"
	"github.com/go-micro/microwire/broker"
	"github.com/go-micro/microwire/registry"
	"github.com/go-micro/microwire/transport"
	"github.com/go-micro/microwire/wire"
	"go-micro.dev/v4"
)

import (
	_ "github.com/go-micro/microwire/plugins/cli/urfave"
	_ "github.com/go-micro/plugins/v4/broker/nats"
	_ "github.com/go-micro/plugins/v4/registry/nats"
	_ "github.com/go-micro/plugins/v4/transport/nats"
)

// Injectors from wire.go:

func NewWireService(opts ...wire.Option) (micro.Service, error) {
	options := microwire.ProvideOptions(opts)
	cli, err := microwire.ProvideCLI(options)
	if err != nil {
		return nil, err
	}
	cliArgs := microwire.ProvideCliArgs()
	diFlags := ProvideBrokerFlags()
	registryDiFlags := ProvideRegistryFlags()
	transportDiFlags := ProvideTransportFlags()
	initializedCli, err := microwire.ProvideInitializedCLI(options, cli, cliArgs, diFlags, registryDiFlags, transportDiFlags)
	if err != nil {
		return nil, err
	}
	diOptions, err := ProvideBrokerOpts(options, initializedCli)
	if err != nil {
		return nil, err
	}
	brokerBroker, err := broker.Provide(options, diOptions)
	if err != nil {
		return nil, err
	}
	registryDiOptions, err := ProvideRegistryOpts(options, initializedCli)
	if err != nil {
		return nil, err
	}
	registryRegistry, err := registry.Provide(options, registryDiOptions)
	if err != nil {
		return nil, err
	}
	transportDiOptions, err := ProvideTransportOpts(options, initializedCli)
	if err != nil {
		return nil, err
	}
	transportTransport, err := transport.Provide(options, transportDiOptions)
	if err != nil {
		return nil, err
	}
	v, err := microwire.ProvideMicroOpts(options, initializedCli, brokerBroker, registryRegistry, transportTransport)
	if err != nil {
		return nil, err
	}
	service, err := microwire.ProvideMicroService(options, cli, v)
	if err != nil {
		return nil, err
	}
	return service, nil
}
